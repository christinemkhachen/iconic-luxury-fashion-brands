

// const brandsDiv = () => document.querySelector("#brands"); //diff between . and # is . refers to a class 
// //this function expression returns the div from the HTML document with an id of brands from line 19
// //and # refers to an id
// //class is useful for applying styling to more than one element or for grabbing more than one element
// //id is useful for grabbing a SINGLE element since ids must be unique 
// //remember the HTML id attribute is different from the id key for each object in your db json


// let brandsInfo = [];
// //we create this empty array but later on we will fill it with data from our fetch
// const displayBrand = (brand) => {
// //this function will be called once for each brand object in our fetchBrands() function
//   const extraImagesDiv = document.createElement("div");
//  //the line above uses JavaScript's createElement method to create this HTML: <div></div> 
 

//   extraImagesDiv.id = `extra-${brand.name.replaceAll(" ", "-")}-images`;
//   //the line above uses JavaScript to create the HTML below:
//   //<div id="*brandNameGoesHere*-images"></div> 
//   //we are using string interpolation to set the id to *brandNameGoesHere*-images like this: 
//   //Chanel-images, Louis Vuitton-images etc
//   //because we are calling this function displayBrand once 
//   //for each brand inside of our fetchBrands function that means we will
//   //create a separate div for each brand whose id is *brandNameGoesHere*-images

//   extraImagesDiv.className = "extra-images";
//   //<div id="" class="extra-images"></div> the line above is assigning a class name to each of the divs
//   //we create for each brand. This enables us to reference this classname with dot notation
//   //in our css style sheet so we can apply the same styling rules to each of our brand divs (line 102 of your style.css file)

//   const div = document.createElement("div"); //creating another div... div is one example of an html tag.
//   //<div></div>
//   div.id = brand.name.replaceAll(" ", "-").toLowerCase(); //we are using JavaScript to dynamically set the id attribute 
//   ///using div.id to set the id to the brand's name.
//   //<div id="*brandNameGoesHere*"></div>
//   //We are accessing each brand's name by referencing the brand object
//   // we receive the brand object as an argument to this function in line 4.
//   //the brand object was fetched from our db.json in the fetchBrands function
//   //we use dot notation to access the value of each brand object's name key

//   //once again this will result in the creation of 4 divs if you have 4 brands in your db.json
//   //because this function will be called once for each brand inside of your fetch brands function

//   div.className = "brand-card-front";
//   //<div id="*brandNameGoesHere*" class="brand-card-front"></div>
//   //we use .className to assign a class name to each of our divs
//   //we do this so we can apply the same styling rules to each brand div by referencing the class name
//   //.brand-card-front in line 61 of our stye.css file

//   const img = document.createElement("img"); //using javascript to create an img tag . img is an example of a self closing html tag 
//   //<img>

//   img.src = brand.main_image;
//   // we set the src attribute of the img tag which defines the path needed to access the image
//   //<img src="*image path goes here *">
//   //remember this function is being called once for each of our brand objects from the db.json
//   //so we are using dot notation to access the value for each brand's main image key
//   //which will basically return the address where that image lives in our project

//   const h3 = document.createElement("h3"); //using javascript to create an h3 html tag
//   //<h3></h3>

//   const a = document.createElement("a"); // using JavaScript to create an anchor tag
//   //to learn more about a tags go to https://www.w3schools.com/tags/tag_a.asp
//   //<a></a>

//   a.textContent = brand.name; //we are accessing each brand from the brand parameter 
//   //that was passed as an argument to this function
//   //we are using dot notation to access the value for that brand object's name key
//   //we are using that brand's name as the text inside of our a tag
//   //<a>*brand name goes here*</a>

//   a.href = `#${brand.name.replaceAll(" ", "-").toLowerCase()}`;
//   //in the line above we are setting the a tags href attribute
//   //the href attribute indicates the link's destination
//   //<a href="#*lower case version of the brand name goes here*-">*brand name goes here*</a>

//   a.addEventListener("click", handleClick);
//   //we are attaching an event listener to each of the links generated by our a tag
//   //eventListeners accept two arguments the first one is the name of the event 
//   //the second one is the name of the function that will be called when the event is triggered by a user action
//   // in this case the user action would be clicking the a tag
//   //put differently our event listener is listening for a click event and then
//   // calling the handleClick function
//   //every time that a tag gets clicked by a user

//   h3.appendChild(a);
//   //we are using the appendChild method to nest our a tag inside of our h3 tag... like this
//   //<h3>
//   ////<a href="#*lower case version of the brand name goes here*-">*brand name goes here*</a>
//   //</h3>

//   const iconicHover = document.createElement("div"); // we are using the createElement method to create a new div

//   img.addEventListener("mouseenter", (event) => {
//     //we are adding an event listener to the img tag we created earlier
//     //this event listener will notice every time a user mouses over the img tag
//     //and call this anonymous function whenever that event occurs
//     img.classList.add("animate");
//     //the line above will add animate as a class attribute to this particular img when it is clicked
//     //line 92 of your css style sheet uses .animate to apply a unique set of styling rules
//     //that only occur when this function is called as a result of a user hovering over this specific img
//     //remember each img will get its very own event listener because we are adding this event
//     //listener inside of a function that is called one time for each of your brand objects

//     iconicHover.textContent = ` 
//      ${brand.iconic_sayings}
//      ${brand.iconic_hover}
//     `;
//     //remember iconicHover refers to the div we created in line 74
//     //when this event listener is triggered we will we use the textContent method to
//     // add text to that specific div
//     //we select the specific text to add using dot notation to access that brand's
//     //values for both the iconic_sayings and iconic_hover keys
//     img.replaceWith(iconicHover);
//     //we are using the replaceWith method to replace the image with the iconicHover div
//   });

//   iconicHover.addEventListener("mouseleave", () => {
//     //we are adding an event listener to the iconicHover div we created
//     //when the user takes their mouse away from the div this anonymous function will be called
//     img.classList.remove("animate");
//     //removing the word "animate" from the class means that the styling rules
//     //from line 92 of your css file will no longer apply to this image
//     iconicHover.replaceWith(img);
//     //we are using the replaceWith method to replace the iconicHover div with the img
//     //to make it appear the way it did before the user hovered over the image in the first place
//   });

//   const h4 = document.createElement("h4"); //using javascript to create an h4 html tag
//   //<h4></h4>
//   h4.textContent = brand.founder; //we are using textContent method to insert text into our h4 tag
//   //we are using dot notation to access the value for brand object's founder key from our db.json file
//   //<h4>*brand's founder goes here *</h4>

//   const likes = document.createElement("button");
//   // we are using the document.createElement method to create a button element
//   //<button></button>

//   likes.innerHTML = '<i class="far fa-heart"></i>';
//   // we are using the innerHTML method to insert a line of html inside of our likes button tag
//   //we give our i tag a class name of far fa-heart
//   //this is how we get that cute little heart in the likes button
//   //<button type="button">
//   //<i class="far fa-heart"></i>
//   //</button>

//   likes.addEventListener("click", () => {
//     likes.innerHTML = '<i class="fas fa-heart"></i>';
//   });

//   h3.append(likes);
//   //we are using the append method to nest the likes button inside of the h3 tag
//   //_________________________________________________________________________________
//   //ONCE WE NEST THE likes button INSIDE of the h3 IT WILL LOOK LIKE THIS
//   //<h3>
//   //<a href="#*lower case version of the brand name goes here*-">*brand name goes here*</a>
//   //<button type="button">
//   //<i class="far fa-heart"></i>
//   //</button>
//   //</h3>
//   //_________________________________________________________________________________
//   div.append(h3, img, h4, extraImagesDiv);
//   //we are using the append method to nest our h3, img, h4 and extraImagesDiv inside of our div                     
//   //_________________________________________________________________________________
//   //ONCE WE NEST THE ELEMENTS INSIDE THE DIV IT WILL LOOK LIKE THIS
//   //<div id="*brandNameGoesHere*" class="brand-card-front">
//   //<h3>
//   //<a href="#*lower case version of the brand name goes here*-">*brand name goes here*</a>
//   //<button type="button">
//   //<i class="far fa-heart"></i>
//   //</button>

//   //</h3>
//   //<img src="*image path goes here *">
//   //<h4>*brand's founder goes here *</h4>
//   //<div id="" class="extra-images"></div>
//   //</div>
//   //_________________________________________________________________________________

//   brandsDiv().appendChild(div);
//   //brandsDiv() refers to the function in line 1. We are calling that function to return
//   //the div from your HTML document in line 19
//   //since that div alread exists in the HTML document
//   //we can attach all of the HTML we've generated using JavaScript to it

//   //the wedding comparison: the HTML document is like a wedding. You have to know someone
//   //at the wedding to attend. You can either be invited directly to the wedding or you can
//   //as the guest of a guest aka plus one. We've been using JavaScript to generate HTML code, but
//   //that code cannot attend the wedding (aka enter the HTML document) unless it knows someone
//   //at the wedding(aka brandsDiv)
//   //so our newly generated html elements are like the brandDiv's plus one
// };

// const handleClick = (event) => {
//   //this is the function that will be called every time our a tag gets clicked
//   const logo = event.target.textContent;
//   //we are receiving the event object as an argument when this function is called and that
//   //event object has a key of target whose value is whatever html element was involved in the event
//   //in this case that is the a tag
//   //textContent refers to the brand's name which we previously added to our a tag
//   const brand = brandsInfo.find((brandObj) => brandObj.name === logo);
//   //we are using the find array iterator method to look at each of the elements
//   //in the brandsInfo array where we saved the data from our fetch and find the brand object whose name
//   //matches the value of logo
//   //logo is grabbing the name from the event's target
//   //remember how our a tag has a textContent of the brand's name?
//   //we are basicaly looking in our brandsInfo array to find the appropriate brand so we
//   //can render all the images associated with only that specific brand as a result of this click event
//   const brandDetails = document.querySelector(
//     `#extra-${brand.name.replaceAll(" ", "-")}-images`
//     //we are looking for the html element with an id of extra-*brandNameGoesHere*-images
//     //since ids are unique it will refer to only the images associated with that specific brand
//   );

//   const brandCardFront = document.querySelector(
//     `#${brand.name.replaceAll(" ", "-").toLowerCase()}`
//   );

//   if (brandDetails.innerHTML === "") {
//     if (!brandCardFront.classList.contains("block-view")) {
//       document
//         .querySelectorAll(".brand-card-front")
//         .forEach((div) => div.classList.toggle("block-view"));
//     }
//     document
//       .querySelectorAll(".extra-images")
//       .forEach((div) => (div.innerHTML = ""));
//     brand.extra_images.forEach((ImageUrl) => {
//       const img = document.createElement("img");
//       img.src = ImageUrl;
//       img.className = "extra-image";
//       brandDetails.appendChild(img);
//     });
//   } else {
//     brandDetails.innerHTML = "";
//     document
//       .querySelectorAll(".brand-card-front")
//       .forEach((div) => div.classList.remove("block-view"));
//   }
// };
// //Not going to lie the code above is pretty fancy..I would need Cameron to explain line by line exactly
// //what's happening, but he's not home so here's the basic idea
// //the code above is responsible for the conditional rendering of your images
// //once a brand is clicked the brand gets a class of block-view which you can find
// //in a couple different places in your css file
// //once a new brand is clicked the block view class is removed from the other brands
// //It's basically clearing away any images that
// //were displayed as the result of previous clicks for other brands by removing that "block-view" styling rules

// const fetchBrands = () => {
//   fetch("http://localhost:3000/brands") //grabs all data from db.json
//     .then((response) => response.json()) //gives you wayy TMI (gives me back an http response)
//     //calling the .json() method on the http response gives us access to the response body
//     //which in this case is the data from the db.json
//     .then((data) => {
//       console.log(data, "data");
//       //it's always a good idea to put a console.log inside the second .then method
//       //to verify that your fetch is returning what you expect it to return
//       //or just to get a sense of the structure of your returned data
//       brandsInfo = data; //our brandsInfo array from line 2 will store our data so we can access it later
//       data.forEach((brand) => {
//         //since data is an array we can use the forEach array iterator method to pass
//         //each brand object aka each element of the data array as the argument to our displayBrand function when we call it
//         displayBrand(brand);
//       });
//     })
//     .catch((error) => console.log(error));
//   //I need to learn a little more about try catch and throw before I would feel
//   //comfortable explaining this line of code
//   //here's a link about the catch method but it's a little over my head
//   //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch
// };

// const handlePageLoaded = () => {
//   //this function calls the fetchBrands function
//   fetchBrands();
// };

// document.addEventListener("DOMContentLoaded", handlePageLoaded);
// //we are adding an event listener to the HTML document itself
// //when the HTML page loads the handlePageLoaded will be called
// // which will in turn call the fetchBrands function which will in turn call
// //displayBrand function once for each brand object. This is the very first event listener
// //that will get triggered.



//--------------------------------------------------
const brandsDiv = () => document.querySelector("#brands"); //diff betweeen . and # is . refers to a class and
let brandsInfo = [];

const displayBrand = (brand) => {
  const extraImagesDiv = document.createElement("div");
  extraImagesDiv.id = `extra-${brand.name.replaceAll(" ", "-")}-images`;
  extraImagesDiv.className = "extra-images";

  const div = document.createElement("div"); //creating a div (brand 1 for example) this also an example html tag..
  div.id = brand.name.replaceAll(" ", "-").toLowerCase(); //we are setting an id attribute in this case with div.id (hence the id part) and giving it a value of the brand object's id so either brand-1, brand-2 brand-3 etc in this app
  div.className = "brand-card-front";

  const img = document.createElement("img"); //using javascript to create an html tag *the html tag HAS TO BE VALID u cant just use a conveient name*
  img.src = brand.main_image;

  const h3 = document.createElement("h3"); //using javascript to create an html tag
  const a = document.createElement("a");
  a.textContent = brand.name;
  a.href = `#${brand.name.replaceAll(" ", "-").toLowerCase()}`;
  a.addEventListener("click", handleClick);
  h3.appendChild(a);

  const iconicHover = document.createElement("div");

  img.addEventListener("mouseenter", (event) => {
    img.classList.add("animate");
    iconicHover.textContent = ` 
     ${brand.iconic_sayings}
     ${brand.iconic_hover}
    `;
    img.replaceWith(iconicHover);
  });
  iconicHover.addEventListener("mouseleave", () => {
    img.classList.remove("animate");
    iconicHover.replaceWith(img);
  });
  const h4 = document.createElement("h4"); //using javascript to create an html tag
  h4.textContent = brand.founder; //
  const likes = document.createElement("button");
  likes.innerHTML = '<i class="far fa-heart"></i>';
  likes.addEventListener("click", () => {
    likes.innerHTML = '<i class="fas fa-heart"></i>';
  });
  h3.append(likes);
  div.append(h3, img, h4, extraImagesDiv);
  brandsDiv().appendChild(div);
};

const handleClick = (event) => {
  const logo = event.target.textContent;
  const brand = brandsInfo.find((brandObj) => brandObj.name === logo);
  const brandDetails = document.querySelector(
    `#extra-${brand.name.replaceAll(" ", "-")}-images`
  );
  const brandCardFront = document.querySelector(
    `#${brand.name.replaceAll(" ", "-").toLowerCase()}`
  );

  if (brandDetails.innerHTML === "") {
    if (!brandCardFront.classList.contains("block-view")) {
      document
        .querySelectorAll(".brand-card-front")
        .forEach((div) => div.classList.toggle("block-view"));
    }
    document
      .querySelectorAll(".extra-images")
      .forEach((div) => (div.innerHTML = ""));
    brand.extra_images.forEach((ImageUrl) => {
      const img = document.createElement("img");
      img.src = ImageUrl;
      img.className = "extra-image";
      brandDetails.appendChild(img);
    });
  } else {
    brandDetails.innerHTML = "";
    document
      .querySelectorAll(".brand-card-front")
      .forEach((div) => div.classList.remove("block-view"));
  }
};

const fetchBrands = () => {
  fetch("http://localhost:3000/brands") //grabs all data from db.json
    .then((response) => response.json()) //gives you wayy TMI (gives me back an http response)
    .then((data) => {
      brandsInfo = data;
      data.forEach((brand) => {
        displayBrand(brand);
      });
    })
    .catch((error) => console.log(error));
};

const handlePageLoaded = () => {
  fetchBrands();
};

document.addEventListener("DOMContentLoaded", handlePageLoaded);

// //IN ORDER TO USE THIS CODE THIS LINE FROM THE HTML DOC MUST BE COMMENTED OUT
// // <div class="section" id="brandDetails"></div>
// //this attempt to conditionally  render the inages under each brand is not working because
// //i am failing to hide the other brand's info so they are overlapping
// // <div class="section" id="brandDetails"></div> *

// const brandsDiv = () => document.querySelector("#brands"); //diff betweeen . and # is . refers to a class and id

// let brandsInfo = [];

// const displayBrand = (brand) => {
//   const div = document.createElement("div");
//   div.id = `brand-${brand.id}`;
//   div.className = "brand-card-front";

//   const img = document.createElement("img");
//   img.src = brand.main_image;

//   const h3 = document.createElement("h3");
//   const a = document.createElement("a");
//   a.textContent = brand.name;

//   a.href = "#";
//   //create a div to contain all the images for each brand
//   const brandDetails = document.createElement("div");
//   brandDetails.className = "section";
//   brandDetails.id = "brandDetails";

//   //render all images but set display to none
//   brand.extra_images.forEach((ImageUrl) => {
//     const img = document.createElement("img");
//     img.src = ImageUrl;
//     brandDetails.appendChild(img);
//   });
//   brandDetails.style.display = "none"
//   a.addEventListener("click", (event) => {
//     //setting brandDetails.style.display to "block" is basically removing
//     //the brandDetails div's cloak of invisibility
//     brandDetails.style.display = "block"
//   });
//   h3.appendChild(a);
//   const iconicHover = document.createElement("div");

//   img.addEventListener("mouseover", (event) => {
//     img.classList.add("animate");
//     iconicHover.textContent = `Founder: ${brand.founder}
//     Iconic Saying: ${brand.iconic_sayings}
//     Iconic Saying: ${brand.iconic_hover}
//     `;

//     img.replaceWith(iconicHover);
//   });
//   img.addEventListener("mouseleave", () => {
//     img.classList.remove("animate");
//     iconicHover.replaceWith(img);
//   });
//   const h4 = document.createElement("h4");
//   h4.textContent = brand.founder;
//   const likes = document.createElement("button");
//   likes.innerHTML = '<i class="far fa-heart"></i>';
//   likes.addEventListener("click", () => {
//     likes.innerHTML = '<i class="fas fa-heart"></i>';
//   });

//   // <!-- <div class="section" id="brandDetails"></div> -->
//   div.append(h3, img, h4, likes, brandDetails);

//   brandsDiv().appendChild(div);
// };

// const fetchBrands = () => {
//   fetch("http://localhost:8000/brands")
//     .then((response) => response.json())
//     .then((data) => {
//       brandsInfo = data;
//       data.forEach((brand) => {
//         displayBrand(brand);
//       });
//     })
//     .catch((error) => console.log(error));
// };
// const handlePageLoaded = () => {
//   fetchBrands();
// };
// document.addEventListener("DOMContentLoaded", handlePageLoaded);

//_______________________________________________________________________________________________________
// MATTEO'S PASSING CODE!!!!
//function expression syntax is line below
// const brandsDiv = () => document.querySelector("#brands"); //diff betweeen . and # is . refers to a class and
// //everytime u see document.queryselector just think youre being a badass and youre like tellig HTML* SPECIFICALLY what to find
// // # is going to refer to id
// let brandsInfo = [];
// //function declaration syntax would look like this
// // function brandsDiv(){
// //   document.querySelector("#brands")
// // }
// const displayBrand = (brand) => {
//   const div = document.createElement("div"); //creating a div (brand 1 for example) this also an example html tag..
//   //const brandDetails = document.createElement("div");

//   // line above created  <div></div>
//   //everytime i see document juust think JS is trying to communicate with the HTML* document so Js is just like "hey HTML*, make this tag for me" so the parameter you give it determines which kind of tag you create
//   //brandDetails.className = "brandDetails";
//   const extraImagesDiv = document.createElement("div");
//   extraImagesDiv.id = `extra-${brand.name.replaceAll(" ", "-")}-images`;
//   extraImagesDiv.className = "extra-images";
//   div.id = `brand-${brand.id}`; //we are setting an id attribute in this case with div.id (hence the id part) and giving it a value of the brand object's id so either brand-1, brand-2 brand-3 etc in this app
//   //<div id="brand-1"> </div> it wil change dpending on the brand id number and .forEach method will iterate through our brands and change the brand id number ("brand-2" would be louis vuitton *dont forget the "" bc its a string) for each iteration
//   div.className = "brand-card-front";
//   //<div id="brand-1" class="brand-card-front">  </div>
//   const img = document.createElement("img"); //using javascript to create an html tag *the html tag HAS TO BE VALID u cant just use a conveient name*
//   //<img>
//   img.src = brand.main_image;
//   //<img src=""> we will rely on dot notation to dynamically pull in the relative path associated with that brand object's main image key
//   const h3 = document.createElement("h3"); //using javascript to create an html tag
//   //<h3></h3>
//   const a = document.createElement("a");
//   a.textContent = brand.name;
//   //<h3>*brand's name goes here*</h3> we will rely on dot notation to grab the brand's name from our brand object
//   a.href = `#${brand.name.replaceAll(" ", "-").toLowerCase()}`;
//   // an anchor tag will listen to a click event
//   a.addEventListener("click", handleClick);
//   //this is invoking a handleclick funtion
//   h3.appendChild(a);
//   const iconicHover = document.createElement("div");
//   //we are using brand becaue it is the object and aconic_hover decause it is a key value (DB.jason), this is called invoking a function*******

//   img.addEventListener("mouseenter", (event) => {
//     img.classList.add("animate");
//     iconicHover.textContent = `
//      ${brand.iconic_sayings}
//      ${brand.iconic_hover}
//     `;
//     // the entire point of 31-33 - 31 hieds the icnoic hover when youre not hovering over, 32 means yes dispkay the icnoc hover quote when the mouse is hovering over and
//     // 33 displays it as a block of text${/elements
//     img.replaceWith(iconicHover);
//   });
//   iconicHover.addEventListener("mouseleave", () => {
//     img.classList.remove("animate");
//     iconicHover.replaceWith(img);
//     // this closes the mouse over function so the quote doesnt stay displayed
//   });
//   const h4 = document.createElement("h4"); //using javascript to create an html tag
//   // <h4></h4>
//   h4.textContent = brand.founder; //
//   // <h4>*brand founder *</h4>we will rely on dot notation to grab the brand's founder from our brand object
//   const likes = document.createElement("button");
//   //button is a built in html tag
//   likes.innerHTML = '<i class="far fa-heart"></i>';
//   // we added an icon to the button use font awesome and  the .innerHTML option/attribute or whatever
//   // names the button love
//   likes.addEventListener("click", () => {
//     likes.innerHTML = '<i class="fas fa-heart"></i>';
//   });
//   div.append(h3, img, h4, likes, extraImagesDiv);
//   //appending basically means put the tags in parenthesis inside of the tag on the left in this example div
//   // <div id="brand-1" class="brand-card-front">
//   //<h3>*brand's name goes here*</h3>
//   //<img src="">
//   // <h4>*brand founder *</h4>
//   //</div>
//   brandsDiv().appendChild(div);
//   //show me where the div will go inside your html file
// };
// const handleClick = (event) => {
//   const logo = event.target.textContent;
//   const brand = brandsInfo.find((brandObj) => brandObj.name === logo);
//   const brandDetails = document.querySelector(
//     `#extra-${brand.name.replaceAll(" ", "-")}-images`
//   );
//   const brandCardFront = document.querySelector(
//     `#${brand.name.replaceAll(" ", "-").toLowerCase()}`
//

//---------------------------------------
//add japanese brand

//add event listener that when you hover over the brand name, once you have clicked on the button stating the brand, it displays
//another iconic saying from that brand/founder or the famous tagline

//side note: IN OUR DB JSON there is only 1 object with only 1 key of brands and only 1 value of a nested array and then however many other objects nested within that 1 array.
//inside that array the elements (which are technically called objects in this case) are our brand objects (however many brands we include) lets say around 6 elements/objects (they are the same thing in this scenario)
//inside our brand objects/elements (chanel, LV, etc and all info within that object so all keys and values) we have a nested  array to contain our images.

//REMEMBER emmet lets you abbreviate your html in your html doc
// div.section#title will generate
// <div class="section" id="title">
//function expression syntax is line below
//__________________________________________________________________________________________________________
// bELOW IS A FAILED ATTEMPT AT A CONDITIONAL RENDER (christines)
//IN ORDER TO USE THIS CODE THIS LNE FROM THE HTML DOC MUST BE COMMENTED OUT
// <div class="section" id="brandDetails"></div>
//const brandsDiv = () => document.querySelector("#brands"); //diff betweeen . and # is . refers to a class and
// //everytime u see document.queryselector just think youre being a badass and youre like tellig HTML* SPECIFICALLY what to find
// // # is going to refer to id
// let brandsInfo = [];
// //function declaration syntax would look like this
// // function brandsDiv(){
// //   document.querySelector("#brands")
// // }
// const displayBrand = (brand) => {
//   const div = document.createElement("div"); //creating a div (brand 1 for example) this also an example html tag..
//   // line above created  <div></div>
//   //everytime i see document juust think JS is trying to communicate with the HTML* document so Js is just like "hey HTML*, make this tag for me" so the parameter you give it determines which kind of tag you create
//   div.id = `brand-${brand.id}`; //we are setting an id attribute in this case with div.id (hence the id part) and giving it a value of the brand object's id so either brand-1, brand-2 brand-3 etc in this app
//   console.log(div.id);
//   //<div id="brand-1"> </div> it wil change dpending on the brand id number and .forEach method will iterate through our brands and change the brand id number ("brand-2" would be louis vuitton *dont forget the "" bc its a string) for each iteration
//   div.className = "brand-card-front";
//   //<div id="brand-1" class="brand-card-front">  </div>
//   const img = document.createElement("img"); //using javascript to create an html tag *the html tag HAS TO BE VALID u cant just use a conveient name*
//   //<img>
//   img.src = brand.main_image;
//   console.log(img.src);
//   //<img src=""> we will rely on dot notation to dynamically pull in the relative path associated with that brand object's main image key
//   const h3 = document.createElement("h3"); //using javascript to create an html tag
//   //<h3></h3>
//   const a = document.createElement("a");
//   a.textContent = brand.name;
//   //<h3>*brand's name goes here*</h3> we will rely on dot notation to grab the brand's name from our brand object
//   a.href = "#";
//   // an anchor tag will listen to a click event
//   a.addEventListener("click", (e) => {
//     const logo = e.target.textContent;
//     const brand = brandsInfo.find((brandObj) => brandObj.name === logo);
//     const hideBrands = brandsInfo.filter((brandObj) => brandObj.name != logo);
//     hideBrands.forEach((brand) => hideBrand(brand));
//     //brandDetails.innerHTML = "";
//     brand.extra_images.forEach((ImageUrl) => {
//       const img = document.createElement("img");
//       img.src = ImageUrl;
//       brandDetails.appendChild(img);
//     });
//   });
//   h3.appendChild(a);
//   const iconicHover = document.createElement("div");
//   //we are using brand becaue it is the object and aconic_hover decause it is a key value (DB.jason)

//   img.addEventListener("mouseover", (event) => {
//     img.classList.add("animate");
//     iconicHover.textContent = `Founder: ${brand.founder}
//     Iconic Saying: ${brand.iconic_sayings}
//     Iconic Saying: ${brand.iconic_hover}
//     `;
//     // the entire point of 31-33 - 31 hieds the icnoic hover when youre not hovering over, 32 means yes dispkay the icnoc hover quote when the mouse is hovering over and
//     // 33 displays it as a block of text${/elements
//     img.replaceWith(iconicHover);
//   });
//   img.addEventListener("mouseleave", () => {
//     img.classList.remove("animate");
//     iconicHover.replaceWith(img);
//     // this closes the mouse over function so the quote doesnt stay displayed
//   });
//   const h4 = document.createElement("h4"); //using javascript to create an html tag
//   // <h4></h4>
//   h4.textContent = brand.founder; //
//   // <h4>*brand founder *</h4>we will rely on dot notation to grab the brand's founder from our brand object
//   const likes = document.createElement("button");
//   //button is a built in html tag
//   likes.innerHTML = '<i class="far fa-heart"></i>';
//   // we added an icon to the button use font awesome and  the .innerHTML option/attribute or whatever
//   // names the button love
//   likes.addEventListener("click", () => {
//     likes.innerHTML = '<i class="fas fa-heart"></i>';
//   });
//   const brandDetails = document.createElement("div");
//   brandDetails.className = "section";
//   brandDetails.id = "brandDetails";

//   let renderBtn = document.createElement("button");
//   renderBtn.innerText = "Go back to view more iconic labels!";
//   renderBtn.addEventListener("click", (e) => {
//     brandsDiv().style.display = "none"
//     brandDetails.style.display = "none";
//     fetchBrands();
//   });

//   // <!-- <div class="section" id="brandDetails"></div> -->
//   div.append(h3, img, h4, likes, brandDetails, renderBtn);

//   //appending basically means put the tags in parenthesis inside of the tag on the left in this example div
//   // <div id="brand-1" class="brand-card-front">
//   //<h3>*brand's name goes here*</h3>
//   //<img src="">
//   // <h4>*brand founder *</h4>
//   //</div>
//   brandsDiv().appendChild(div);
//   //show me where the div will go inside your html file
// };
// // const handleClick = (event) => {
// //   const logo = event.target.textContent;
// //   const brand = brandsInfo.find((brandObj) => brandObj.name === logo);
// //   brandDetails.innerHTML = "";
// //   brand.extra_images.forEach((ImageUrl) => {
// //     const img = document.createElement("img");
// //     img.src = ImageUrl;
// //     brandDetails.appendChild(img);
// //   });
// // };
// const fetchBrands = () => {
//   console.log("I AM FETCHING!!!");
//   fetch("http://localhost:8000/brands") //grabs all data from db.json
//     .then((response) => response.json()) //gives you wayy TMI (gives me back an http response)
//     //it is always necessary to call the response.json() method on the response to get the response body aka the data from your db.json aka body objy objy objy
//     //breaks into all the info u didnt need and gives you back exactly what u ask for, in this
//     //case it would be the data from the db.json file aka all the brands, names, etc
//     .then((data) => {
//       //now we can take the data we got back and use it to dynami generate html with js code
//       brandsInfo = data;
//       data.forEach((brand) => {
//         //.foreach itterates through the brands aka objects in order of how its written so the the first brand will be chanel and all the info inside the object/element

//         displayBrand(brand);
//         //show me where the div will go inside your html file
//       });
//     })
//     .catch((error) => console.log(error));
// };
// const handlePageLoaded = () => {
//   fetchBrands();
// };
// document.addEventListener("DOMContentLoaded", handlePageLoaded);

// //add japanese brand

// //add event listener that when you hover over the brand name, once you have clicked on the button stating the brand, it displays
// //another iconic saying from that brand/founder or the famous tagline

// //side note: IN OUR DB JSON there is only 1 object with only 1 key of brands and only 1 value of a nested array and then however many other objects nested within that 1 array.
// //inside that array the elements (which are technically called objects in this case) are our brand objects (however many brands we include) lets say around 6 elements/objects (they are the same thing in this scenario)
// //inside our brand objects/elements (chanel, LV, etc and all info within that object so all keys and values) we have a nested  array to contain our images.

// //REMEMBER emmet lets you abbreviate your html in your html doc
// // div.section#title will generate
// // <div class="section" id="title">
// function hideBrand(hiddenBrand) {
//   let hidden = document.getElementById(`brand-${hiddenBrand.id}`);
//   hidden.style.display = "none";
// }
//background images for css main page
//https://i.pinimg.com/474x/d8/f2/88/d8f2882a05a898cef0bf330810897fc0.jpg
//"https://media.istockphoto.com/vectors/spotlights-background-glowing-stage-light-beams-vector-id1290038988?k=20&m=1290038988&s=612x612&w=0&h=mc5jC94FSekDdOhAhHUTJZOu2fqTEjeWs3xy_J7hXQU="
//https://i.etsystatic.com/11263773/r/il/2ed0ba/1987417405/il_1588xN.1987417405_7127.jpg
//https://runwaydivaboutique.com/wp-content/uploads/2015/04/fashion-runway-models-clipart-with-runway-model-silhouette-o-fashion-runway-facebook.jpg

// brandDetails.innerHTML = "";
// brand.extra_images.forEach((ImageUrl) => {
//   const img = document.createElement("img");
//   img.src = ImageUrl;
//   brandDetails.appendChild(img);
// });

//removed and replaced
